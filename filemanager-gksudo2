#!/bin/bash
#
# FILEMANAGER-GKSUDO2
# GPLv3 license, by William Rueger (furryfixer).
# Provides a File Manager menu option for BOTH DIRECTORIES and
# FILES to open as Root (only for viewing/text editing).
# Works in most common File Managers. Pair with
# "filemanager-gksudo2.desktop". The separate GKSUDO2 script
# is a hard dependency! and xdg-utils is also required.
# By invoking gksudo2, this script is INSECURE,
# and allows root access where it may best be avoided. 
# See gksudo2 for cautions/information. Directories are opened
# with running FM as root, if recognized, and default FM if not.
# Starting a Root FM instance ALWAYS requires password 
# Files, regardless of type, are opened ONLY with default text-editor.
# (gksudo2 itself has no limitation). Default apps for other
# mimetypes are ignored to prevent accidental execution, among other
# things. Also, some unknown/binary files, and most symlinks,
# are prevented from opening. Use at your own risk!
# Updated 07/2023
#============================================================#

RECOGNIZED_FMS="thunar nautilus spacefm pcmanfm-qt pcmanfm dolphin caja konqueror nemo krusader"

error_end1 () {
	if ! (zenity --warning --title="Gksudo2 Error" --text="$*" --no-wrap --no-markup 2>/dev/null); then
		sed 's^\\n^^g' <<< "$*"  # print error without zenity \n format
	fi
	exit 1
}

get_appname () {   # Function avoids blind use of xdg-open, must set $app_desktop first!
	if [[ -f  /usr/share/applications/${app_desktop} ]]; then
		fullpath_dot_dsktp="/usr/share/applications/"$app_desktop
	elif [[ -f  "${HOME}/.local/share/applications/${app_desktop}" ]]; then
		fullpath_dot_dsktp="${HOME}/.local/share/applications/${app_desktop}"
	else
		error_end1 "${app_desktop} not found. Check Path, replace or
change default for this mimetype"
	fi
	app_name=$(grep -m 1  "TryExec=" ${fullpath_dot_dsktp} | sed 's/TryExec=//' | cut -d ' ' -f 1)
	[[ -z $app_name ]] && app_name=$(grep -m 1  "Exec=" ${fullpath_dot_dsktp} | sed 's/Exec=//' | cut -d ' ' -f 1)
	if ! type -P "$app_name" > /dev/null; then
		error_end1 "${app_name} executable not found in Path, or
missing designated mimetype default for ${1}."
	fi
}

gio_file_typ () {
	file_typ=`gio info -a standard::content-type "$1" |  grep 'content-type' | cut -d ' ' -f 4`
		if [[ -z $file_typ ]]; then
			mime_default=""
		else
			mime_default=`gio mime $file_typ | cut -sd ':' -f 2 | xargs`
		fi
}
#============

if [[ ! -x /bin/xdg-mime ]]; then
	error_end1 "Missing xdg-utils dependency
for filemanager-gksudo2"
fi
if [[ ! -x /bin/gksudo2 ]] && [[ ! -x /usr/local/bin/gksudo2 ]]; then
	error_end1 "Missing the gksudo2 dependency
for filemanager-gksudo2"
fi
FILDIR="$1"
# If uri, convert to local path name
FILDIR=$(gio info -a none "$FILDIR" |  grep 'local path' | cut -d ' ' -f 3-)
if [[ -L "$FILDIR" ]]; then
	error_end1 "Filemanager-gksudo2 will not
directly open symbolic links"
fi
CALLING_FM=$(ps -o comm= $PPID)  # may not be accurate (Nautilus/Thunar)
# If process reaped or parent PID is NOT the calling FM
NOT_FM_CMD="systemd init runit supervise s6 shim container"
for bad_fm in $NOT_FM_CMD; do
	if grep -q $bad_fm <<< "$CALLING_FM"; then 
		CALLING_FM=""
		ps -o comm= | tac > /tmp/ps-tac  # Will choose most recently opened known FM
		while read cmd
		do
			if grep -q "$cmd" <<< "$RECOGNIZED_FMS"; then
				CALLING_FM="$cmd"
				break
			fi
		done < /tmp/ps-tac
		rm /tmp/ps-tac
	fi
done
if [[ -d "$FILDIR" ]]; then  # for Directories
	export ROOT_FM=true
	mime_default=`xdg-mime query default inode/directory`
	if [[ -z $mime_default ]] || [[ $mime_default = "filemanager-gksudo2.desktop" ]]; then
		app_desktop=`grep 'inode/directory'  /usr/share/applications/mimeinfo.cache | \
cut -d = -f 2 | cut -d ";" -f 1`  # Insist on a sane default for inode/directory
		xdg-mime default $app_desktop inode/directory
	else
		app_desktop=$mime_default
	fi
	app_name=$(which $CALLING_FM 2>/dev/null)
	[[ ! -x $app_name ]] && get_appname "inode/directory"  # get_appname requires $app_desktop
else # for files
	export ROOT_FM=false
 	if [[ ! -f "$FILDIR" ]]; then
		error_end1 "STOP! Filemanager-gksudo2 will not open sockets, or block or character devices"
	fi
	if [[ ! -r "$FILDIR" ]]; then
		if [[ -x "$FILDIR" ]]; then
			error_end1 "Stop! executable files with unreadable
mimetypes are prevented from opening
as ROOT by Filemanager-gksudo2."
		else # unknown type but not executable
			mime_default="unknown"
		fi 
	elif [[ "$CALLING_FM" =~ dolphin|krusader|konqueror ]]; then # KDE apps use xdg-mime, not gio
		file_typ=`xdg-mime query filetype "$FILDIR"`
		if [[ -z $file_typ ]]; then
			gio_file_typ $FILDIR  # Fallback if xdg-mime not reading
		else
			mime_default=`xdg-mime query default $file_typ`
		fi
	else  # Most other FMs use gio
		gio_file_typ $FILDIR
	fi
	if [[ `grep 'x-msdownload\|x-exec\|dos-exec\|binary\|pie-exec' <<< $file_typ` ]]; then
		error_end1 "STOP! some binary/executable or unknown files prevented
from opening as ROOT by Filemanager-gksudo2."
	fi
	if [[ `grep 'x-empty\|x-zerosize' <<< $file_typ` ]]; then
		error_end1 "STOP! Gksudo2 prevented from opening empty files due to
vague mimetype. If Gksudo2 is the default to open,
reset default."
	fi
	if [[ -z $mime_default ]] || [[ $mime_default = "filemanager-gksudo2.desktop" ]]; then
		error_end1 "Gksudo2 improperly set as the default to open this mimetype,
or no default set. Reset default for this mimetype
before using gksudo2 as alternative."
	fi
	app_desktop=`xdg-mime query default text/plain`
	if [[ -z $app_desktop || $app_desktop = "filemanager-gksudo2.desktop" ]]; then ## Improper default, remove it
		error_end1 "Filemanager-gksudo2 requires a sane default for
text/plain, even if file to open is another mimetype.
Set/reset default app for text/plain and retry."
	fi
	get_appname "text"  # get_appname requires $app_desktop

fi
## Double check existence of $app_name to avoid executing $FILDIR directly
if [[ -z $app_name || $app_name == *"gksudo"* ]]; then
	error_end1 "STOP! No app found to open, or attempt
by gksudo2 to call itself. Reset
default app for this mimetype."
fi
#FILDIR=$(printf '%q' "$FILDIR") # if needed to escape special chars for sudo call
exec gksudo2 $app_name \"$FILDIR\"
# Still here if exec failed
error_end1 "${app_name} ${FILDIR} failed to
work with gksudo2"
fi
