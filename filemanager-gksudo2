#!/bin/bash
#
# FILEMANAGER-GKSUDO2
# GPLv3 license, by William Rueger (furryfixer).
# Provides a File Manager menu option for BOTH DIRECTORIES and
# FILES to open as Root (only for viewing/text editing).
# Works in most common File Managers. Pair with
# "filemanager-gksudo2.desktop". The separate GKSUDO2 script
# is a hard dependency! and xdg-utils is also required.
# By invoking gksudo2, this script is INSECURE,
# and allows root access where it may best be avoided. 
# See gksudo2 for cautions/information. Directories are opened
# with running FM as root, if recognized, and default FM if not.
# Opening Directories as Root ALWAYS requires a password. 
# Files, regardless of type, are opened ONLY with default text-editor.
# (gksudo2 itself has no limitation). Default apps for other
# mimetypes are ignored to prevent accidental execution, among other
# things. Also, some unknown/binary files, and most symlinks,
# are prevented from opening. Use at your own risk!
# Updated 10/2025.
#============================================================#

RECOGNIZED_FMS="thunar nautilus spacefm pcmanfm-qt pcmanfm dolphin caja konqueror nemo krusader"

error_end1 () {
	if ! (zenity --warning --title="Gksudo2 Error" --text="$*" --no-wrap --no-markup 2>/dev/null); then
		sed 's^\\n^^g' <<< "$*"  # print error without zenity \n format
		rm /tmp/gk/giofile 1>/dev/null 2>&1
 	fi
	exit 1
}

get_appname () {   # Function avoids blind use of xdg-open, must set $app_desktop first!
	if [[ -f  /usr/share/applications/${app_desktop} ]]; then
		fullpath_dot_dsktp="/usr/share/applications/"$app_desktop
	elif [[ -f  "${HOME}/.local/share/applications/${app_desktop}" ]]; then
		fullpath_dot_dsktp="${HOME}/.local/share/applications/${app_desktop}"
	else
		error_end1 "${app_desktop} not found. Check Path, replace or
change default for this mimetype"
	fi
	app_name=$(grep -m 1  "TryExec=" ${fullpath_dot_dsktp} | sed 's/TryExec=//' | cut -d ' ' -f 1)
	[[ -z $app_name ]] && app_name=$(grep -m 1  "Exec=" ${fullpath_dot_dsktp} | sed 's/Exec=//' | cut -d ' ' -f 1)
	if ! type -P "$app_name" > /dev/null; then
		error_end1 "${app_name} executable not found in Path, or
missing designated mimetype default for ${1}."
	fi
}

sudo_znty () {
	if ! sudo -A "$@" 2>/tmp/gk/sudo-error; then
		if grep -q "3 incorrect password attempts" /tmp/gk/sudo-error; then
			error_end1 "STOP!  Password for ${USER} failed after multiple attempts.
If proper password, likely temporarily locked out."
		elif grep -q "not in the sudoers file" /tmp/gk/sudo-error; then
			error_end1 "STOP! User \"${USER}\" has no sudo privileges, 
 which gksudo2 requires."
		elif grep -q "is not allowed" /tmp/gk/sudo-error; then
			error_end1 "STOP! User \"${USER}\" does not have sudo
 privileges to run gksudo."
		fi
		text_msg=$(cat /tmp/gk/sudo-error)
		error_end1 "$text_msg"
	fi
}
#============

admin_call=false
if [[ ! -x /bin/xdg-mime ]]; then
	error_end1 "Missing xdg-utils dependency
for filemanager-gksudo2"
fi
if [[ ! -x /bin/gksudo2 ]] && [[ ! -x /usr/local/bin/gksudo2 ]]; then
	error_end1 "Missing the gksudo2 dependency
for filemanager-gksudo2"
fi
# Check to see if sudo will bypass password
sudo -nv  >/dev/null 2>&1 && sudo_wont_ask=true || sudo_wont_ask=false 
[[ ! -d /tmp/gk ]] && (mkdir -m0777 /tmp/gk)  # avoid sticky bit issues if su before running
if [[ ! -e /bin/zenity && /usr/bin/zenity ]]; then
	echo "STOP! Zenity is not found, and required to run gksudo2"
	exit 1
fi
if [[ ! -f /tmp/gk/sudo-error ]]; then
	touch /tmp/gk/sudo-error 
	chmod 0666 /tmp/gk/sudo-error
fi
[[ -f /tmp/gk/zenity-sudo-passwd ]] && rm /tmp/gk/zenity-sudo-passwd
echo "#!/bin/bash
zenity --entry --title=\"gksudo2\" --hide-text --text \"Enter sudo Password for \\\"${USER}\\\"          \"" > /tmp/gk/zenity-sudo-passwd 2>/dev/null
chmod 0777 /tmp/gk/zenity-sudo-passwd
export SUDO_ASKPASS="/tmp/gk/zenity-sudo-passwd"
FILDIR="$1"
if grep -q 'admin:/' <<< $1; then
	admin_call=true
	FILDIR=$(sed 's/admin:\///' <<< $FILDIR)
fi
if grep -q 'file:/' <<< $1; then
	FILDIR=$(sed 's/file:\///' <<< $FILDIR)
fi
sudo_znty gio info $FILDIR > /tmp/gk/giofile
# If uri, convert to local path name. Likely redundant
LOCALPATH=$(grep 'local path' /tmp/gk/giofile | cut -d ' ' -f 3-)  
if (grep -q 'symlink: TRUE' /tmp/gk/giofile) || (grep -q 'socket' /tmp/gk/giofile); then 
	error_end1 "Filemanager-gksudo2 will not
directly open symbolic links or sockets"
fi
if (grep -q 'blockdevice' /tmp/gk/giofile) || (grep -q 'chardevice' /tmp/gk/giofile); then
	error_end1 "Filemanager-gksudo2 will not
directly open block or character devices"
fi
gio_file_typ=$(grep 'standard::content-type' /tmp/gk/giofile | cut -d ' ' -f 4)
CALLING_FM=$(ps -o comm= $PPID)  # may not be accurate (Nautilus/Thunar)
# If process reaped or parent PID is NOT the calling FM
NOT_FM_CMD="systemd init runit supervise s6 shim container"
for bad_fm in $NOT_FM_CMD; do
	if grep -q $bad_fm <<< "$CALLING_FM"; then 
		CALLING_FM=""
		ps -u $USER -o comm= | tac > /tmp/ps-tac  # Will choose most recently opened known FM
		while read cmd
		do
			if grep -q "$cmd" <<< "$RECOGNIZED_FMS"; then
				CALLING_FM="$cmd"
				break
			fi
		done < /tmp/ps-tac
		rm /tmp/ps-tac
	fi
done

if [[ -d $LOCALPATH ]]; then  # for Directories
	if $admin_call; then
		error_end1 "STOP! Admin root privileges already present.
gksudo is unnecessary for directories and may fail. Use only if privileges not 
already elevated."	
	fi
	if $sudo_wont_ask; then 	 # force password for directories
		su -c : $USER <<< "$($SUDO_ASKPASS)" >/dev/null 2>&1 || error_end1 "Password Not Recognized"
	fi	
	mime_default=`xdg-mime query default inode/directory`
	if [[ -z $mime_default ]] || [[ $mime_default = "filemanager-gksudo2.desktop" ]]; then
		app_desktop=`grep 'inode/directory'  /usr/share/applications/mimeinfo.cache | \
cut -d = -f 2 | cut -d ";" -f 1`  # Insist on a sane default for inode/directory
		xdg-mime default $app_desktop inode/directory
	else
		app_desktop=$mime_default
	fi
	app_name=$(which $CALLING_FM 2>/dev/null)
	[[ ! -x $app_name ]] && get_appname "inode/directory"  # get_appname requires $app_desktop

else # for files
	if [[ "$CALLING_FM" =~ dolphin|krusader|konqueror ]]; then # KDE apps use xdg-mime, not gio
		file_typ=`xdg-mime query filetype "$LOCALPATH"`
		[[ -z $file_typ ]] && file_typ=$gio_file_typ  # Fallback if xdg-mime not reading
		mime_default=`xdg-mime query default $file_typ`
		[[ -z $mime_default ]] && `gio mime $gio_file_typ | cut -sd ':' -f 2 | xargs` # another fallback
	else  # Most other FMs use gio
		file_typ=$gio_file_typ
		mime_default=`gio mime $gio_file_typ | cut -sd ':' -f 2 | xargs`
	fi
	[[ -z $file_typ ]] && mime_default=""  # unlikely, but both methods failed to find file type
	if [[ `grep 'octet\|x-msdownload\|x-exec\|dos-exec\|binary\|pie-exec' <<< $file_typ` ]]; then
		error_end1 "STOP! some binary/executable or unknown files prevented
from opening as ROOT by Filemanager-gksudo2."
	fi
	if [[ `grep 'x-empty\|x-zerosize' <<< $file_typ` ]]; then
		error_end1 "STOP! Gksudo2 prevented from opening empty files due to
vague mimetype. If Gksudo2 is the default to open,
reset default."
	fi
	if [[ -z $mime_default ]] || [[ $mime_default = "filemanager-gksudo2.desktop" ]]; then
		error_end1 "Gksudo2 improperly set as the default to open this mimetype,
or no default set. Reset default for this mimetype
before using gksudo2 as alternative."
	fi
	app_desktop=`xdg-mime query default text/plain`
	if [[ -z $app_desktop || $app_desktop = "filemanager-gksudo2.desktop" ]]; then ## Improper default, remove it
		error_end1 "Filemanager-gksudo2 requires a sane default for
text/plain, even if file to open is another mimetype.
Set/reset default app for text/plain and retry."
	fi
	get_appname "text"  # get_appname requires $app_desktop
fi
## Double check existence of $app_name to avoid executing $LOCALPATH directly
if [[ -z $app_name || $app_name == *"gksudo"* ]]; then
	error_end1 "STOP! No app found to open, or attempt
by gksudo2 to call itself. Reset
default app for this mimetype."
fi
rm /tmp/gk/giofile 
if grep -q 'nautilus' <<< $app_name; then # gksudo will fail for Nautilus, so use admin:// 
	zenity --warning --title="Warning" --text="Filemanager-gksudo2 calling Nautilus with admin/root privileges. Be careful!" 2>/dev/null
	exec nautilus admin://"$LOCALPATH"
fi
LOCALPATH=$(sed "s#//#/#" <<< $LOCALPATH)   # Remove double leading slashes
#LOCALPATH=$(printf '%q' "$LOCALPATH") # if needed to escape special chars for sudo call
exec gksudo2 $app_name \"$LOCALPATH\"
# Still here if exec failed
error_end1 "${app_name} ${LOCALPATH} failed to
work with gksudo2"
fi
